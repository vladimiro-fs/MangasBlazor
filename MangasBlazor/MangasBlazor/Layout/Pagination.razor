<div class="p-xl-2">
    <nav aria-label="Pagination">
        <ul class="pagination justify-content-center">
            @foreach (var link in links)
            {
                <li @onclick="@(() => SelectedPageLink(link))" style="cursor: pointer;" 
                    class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
                    <span class="page-link" href="#">@link.Text</span>
                </li>
            }
        </ul>
    </nav>
</div>

@code {
    [Parameter] public int currentPage { get; set; } = 1;
    [Parameter] public int totalPageAmount { get; set; }
    [Parameter] public int radius { get; set; } = 3;
    [Parameter] public EventCallback<int> selectedPage { get; set; }

    List<LinkModel> links;

    class LinkModel
    {
        public LinkModel(int page) : this(page, true) 
        { }

        public LinkModel(int page, bool enabled) : this(page, enabled, page.ToString()) 
        { }

        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public string Text { get; set; }
        public bool Active { get; set; } = false;
    }

    private async Task SelectedPageLink(LinkModel link)
    {
        if (link.Page == currentPage)
        {
            return;
        }

        if (!link.Enabled)
        {
            return;
        }

        currentPage = link.Page;
        await selectedPage.InvokeAsync(currentPage);
    }

    protected override void OnParametersSet()
    {
        LoadPages();
    }

    private void LoadPages()
    {
        links = new List<LinkModel>();

        // handles previous page link
        var isPreviousPageLinkEnabled = currentPage != 1;
        var previousPage = currentPage - 1;

        links.Add(new LinkModel(previousPage, isPreviousPageLinkEnabled, "Previous"));

        // handles specific page links
        for (int i = 1; i <= totalPageAmount; i++)
        {
            if (i >= currentPage - radius && i <= currentPage + radius)
            {
                links.Add(new LinkModel(i)
                {
                    Active = currentPage == i
                });
            }
        }

        // handles next page link
        var isNextPageLinkEnabled = currentPage != totalPageAmount;
        var nextPage = currentPage + 1;

        links.Add(new LinkModel(nextPage, isNextPageLinkEnabled, "Next"));
    }
}

@page "/mangas"
@inject IMangaService _mangaService
@inject NavigationManager NavigationManager

<h1>Mangas</h1>

<div>
    <a class="btn btn-success" href="manga/create">New Manga</a>
</div>

<br />

@if (mangas != null)
{
    <table>
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Title</th>
                <th scope="col">Publisher</th>
                <th scope="col">Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var manga in mangas)
            {
                <tr>
                    <td><img class="icon" src="@manga.Image" height="75" width="52"></td>
                    <td>@manga.Id</td>
                    <td>@manga.Title</td>
                    <td>@manga.Publisher</td>
                    <td>@manga.Price</td>
                    <td><a class="btn btn-primary" href="manga/edit/@manga.Id">Edit</a></td>
                    <td><a class="btn btn-danger">Delete</a></td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <DisplayMessage ErrorMessage="@errorMessage" />
}

@code {
    private IEnumerable<MangaDTO> mangas = new List<MangaDTO>();
    private string? errorMessage = "Unable to access mangas";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadMangas();
        }
        catch (UnauthorizedAccessException)
        {
            NavigationManager.NavigateTo("unauthorized");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading mangas: {ex.Message}";
        }
    }

    protected async Task LoadMangas()
    {
        try
        {
            mangas = await _mangaService.GetMangas();
        }
        catch (Exception)
        {
            throw;
        }
    }
}
